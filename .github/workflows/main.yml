name: Deploy Infrastructure

on:
  push:
    branches:
      - prod
      - dev
    paths: 
    - dev/**
    - app/**
    
  pull_request:
    branches:
    - prod
    - dev
    paths: 
    - dev/**
    - app/**
    
permissions:
  contents: read
  pull-requests: write


jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: prod
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN:  ${{ secrets.AWS_SESSION_TOKEN }}
      WORKING_DIR: ./dev
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: true

      - name: Terraform fmt
        id: fmt
        run: terraform fmt 
        continue-on-error: true


      - name: Terraform Init
        id: init
        run: terraform init

           
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

    
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color -out tf.plan
        working-directory: ./dev # Use your environment folder
        continue-on-error: true

      - name: Get result
        run: echo "${{ steps.validate.outputs.stdout }}"
      
#       - name: Terraform Show
#         id: show
#         run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
          
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;
            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }
            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Apply
        run: terraform apply -input=false tf.plan
        
      - name: Sleep for 30 seconds
        run: sleep 60
        shell: bash
      
#       deploy images
  
  build:
    needs: terraform
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push webapp image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: webapp-image
        IMAGE_TAG: v0.1
      run: |
        cd ./app
        ls -ltra
        # Docker build
        docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
        # Unit test
        # docker run $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # docker ps
        # echo "Pause for 10 seconds to let container start"
        # sleep 10
        # curl localhost -vvv
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        

  #       deploy images
  
    - name: Build, test, tag, and push mysql image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: mysql-image
        IMAGE_TAG: v0.1
      run: |
        cd ./app
        ls -ltra
        # Docker build
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_mysql .
        # Unit test
        # docker run $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # docker ps
        # echo "Pause for 10 seconds to let container start"
        # sleep 10
        # curl localhost -vvv
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
 
